---------------------------------------makefile文件相关----------------------------------------
1. 格式
application: main.o convert.o format.o                            ----- 依赖行
        gcc main.o convert.o format.o -o application              ----- 命令行
main.o: main.c
        gcc -c main.c
convert.o: convert.c convert.h
        gcc -c convert.c convert.h
format.o: format.c format.h
        gcc -c format.c format.h

注意： 命令必须得在TAB后，make利用TAB来区分命令

2. make更新项目的依据(back-chaining)
   从源代码层开始向顶层的二进制文件逐层检查下一层是否比上一层的文件新，若新则执行下面的命令行。

3. 另外一些格式
:^ --     file.o: stdio.h    file.o^: file.c   合并依赖文件
:-   清除原来所有的依赖文件， 只留这里说明的

4. 命令行属性
在指标符后加上下面的符号
-  忽略本命令行的非零返回(即错误返回)， 继续执行。  否则如果执行中产生错误，make将会停止执行
+  make始终执行本命令行
@  执行本命令行时不在标准输出上显示。

5. 目标属性(target properties, 即例子中的application, main.o等)
*IGNORE 在更新本目标下的命令遇到错误时，继续执行
*SILENT 执行本目标下的命令行不print到屏幕
*PRECIOUS 保留中间目标文件
*LIBRARY 说明目标是库
*LIBRARYM 说明目标是库的一个成员
*SYMBOL 说明目标是指定入口的成员

6. 伪目标
不要求make生成实际文件，只是靠make程序执行一些与创建和维护目标文件没有直接联系的辅助性
操作，如打印一些信息，删除一些过时文件等。
有两种使用方式：
        1. cp:
                mv * ../backup
           这种方式由于命令行中并没有创建cp这个文件，所以总是过时的，因此可以当作脚本用
        2. 使用LINUX提供的内部伪目标

        (1)*ERROR： 依赖文件列表
                命令菜单
        当make执行过程中遇到错误，就执行这个命令菜单

        (2)*INCLUDE: file1.mk file2.mk... /  dir1 dir2...
        make执行到这里，就转而处理file1.mk和file2.mk，相当于一种宏展开
        是将内容全部拷贝在这个地方，这样make不仅可以包括其他makefile文件
        同时也能包括其他类型的文件，如宏文件

        (3)*IMPORT:  MACRO  在环境中查找宏定义，将要载入的宏名作为依赖文件

        (4)*EXPORT:  MACRO  与(3)相反， 将makefile中定义的宏输出给环境

        (5)*SETDIR:  path  将该目录设置为工作目录

------------------------------------ Make相关----------------------------------------------

7. Make命令       
make [option] [macrodef] [target]

options:
-c  dir 工作目录
-e  不允许在makefile中对环境的宏赋新值
-f  filename makefile文件名
-i  忽略makefile命令运行的错误，不退出make
-k  执行命令出错时放弃当前目标，转而维护其他目标
-n  显示命令执行顺序，包括silent的命令，但不真正执行
-p  显示makefile的specs(宏定义和内部规则)
-s  执行但是不显示命令
-S  出错即推出make
-V  打印make版本号
-x  将所有宏定义输出到shell环境

make 的 option是基于整个make过程的设置， 而目标属性是基于整个目标的属性，能够控制其下所有
命令行，  而命令行属性则控制该命令，  三者从达到小的控制了make的属性。

------------------------------------- 宏相关-----------------------------------------------


宏定义：
宏名=常量名
make寻找宏首先是内置宏，然后是SHELL中IMPORT的宏，然后是makefile中的宏定义，最后是make命令的宏
因此实际上覆盖优先级是make命令>makefile宏定义>SHELL>内置宏定义
宏的引用$()或者${}

内定义宏：
(1) 控制宏
分为特殊值宏和控制make属性的宏
-->特殊值宏：
        DIRSEPSTR 表示路径中分隔目录与文件名的符号，一般是/
        MAKEDIR 调用make的绝对路径
        PWD 当前目录绝对路径
        NULL 空字符串
        OS 现在操作系统名称
        SHELL 运行的shell
-->控制make属性的宏：
        书写与意义都与目标属性一样，不过这个的作用域是整个makefile文件
        一般是  *IGNORE=Yes ||  *IGNORE=No
(2) 动态宏
对于一个目标文件， 它所依赖的文件一般有跟它同名的， 并且下面命令行又会出现该名字，
因此makefile的规则中，定义了动态宏
$@来表示当前的目标文件的名称， 
$*等于目标文件去掉后缀的名称
file.o: mylib.c
        mv $@ ../backup
        gcc -c $*.c
$&代表当前目标文件在所有规则中的所有依赖文件
$^代表当前目标文件在本规则中的依赖文件
$?代表当前目标文件的依赖文件中比该目标文件新的文件列表
$<代表当前规则中比目标文件新的文件列表
以上动态宏只能出现在命令行中

make提供了与此对应的另外几个宏，专门用于书写依赖文件
$$@
$$%
$$*
$$>

(3) 对宏进行操作
宏扩展描述符：d  b  f
例: FILE=/user/cprogs/main.c
$(FILE:d)=/user/cprogs   $(FILE:b)=main     $(FILE:f)=main.c
$(FILE:db)=/user/cprogs/main  $(FILE:df)=$FILE
还可以对文件列表的宏进行操作
FILELIST=/dir1/dir2/file1.c file2.c dir3/file3.c
$(FILE:d)=/dir1/dir2 . dir3

替换宏中的字符：(只是在展开时替换，并不改变宏本身)
宏名: s/原字符串/新字符串
宏名: 原扩展名=新扩展名
宏名: ^"前缀"
宏名: +"后缀"

--------------------------------------内部规则------------------------------------------
内部给则是为了解决相同依赖关系下大量重复的命令行而定义的机制
.c.o:
        $(CC) $(CFLAGS) -c $<      其中CC和CFLAGS是内定义宏    

---------------------------------------库-----------------------------------------------
1.为什么要使用库
最后生成可执行文件时，如果链接.o文件，整个文件内容将被装入可执行文件，而如果链接库，则
只会装入程序中用到的变量和函数

